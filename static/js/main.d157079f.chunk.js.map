{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","App","useState","val","setVal","loading","setLoading","useReducer","state","action","type","payload","map","itm","tempItm","_id","isDone","filter","todos","setTodos","useEffect","axios","get","then","json","data","error","forEach","each","catch","console","log","handleAdd","value","post","className","placeholder","onChange","e","target","onKeyPress","key","onClick","index","defaultChecked","fieldChanged","updatedValue","object","updateObject","put","updateTodos","checked","style","textDecoration","color","obj","delete","Icon","path","mdiCloseCircle","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d157079f.chunk.js","sourcesContent":["import { useEffect, useReducer, useState } from 'react';\nimport { Action, State, EachTodo } from './types';\nimport axios from 'axios';\nimport { Icon } from '@mdi/react'\nimport { mdiCloseCircle } from '@mdi/js'\nimport './App.scss';\n\nconst baseUrl = 'http://localhost:3005/';\n\nconst App: React.FC = () => {\n  \n  const [val, setVal] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [todos, setTodos] = useReducer(todoReducer, []);\n  \n  const fetchTodos = () => {\n    setLoading(true)\n    axios.get(baseUrl+'get-todos')\n      .then((json: any) => {\n        if (!json.data.data.error) json.data.data.forEach((each: EachTodo) => setTodos({ type: 'add', payload: each }))\n        setLoading(false)\n      })\n      .catch(error => {\n        console.log(error)\n        setLoading(false)\n      })\n  }\n\n  const addTodos = (data: any) => {\n    axios.post(baseUrl+'add-todos', { ...data })\n      .then(json => {\n        const { isDone, value, _id } = json.data.data\n        setTodos({ type: 'add', payload: { isDone, value, _id } })\n        setVal('')\n      })\n      .catch(error => {\n        console.error(error)\n      })\n  }\n\n  const updateTodos = (fieldChanged: string, updatedValue: boolean, object: EachTodo) => {\n    const updateObject: any = { ...object };\n    updateObject[fieldChanged] = updatedValue;\n    axios.put(baseUrl+'update-todos', { ...updateObject })\n      .then((json: Object) => setTodos({ type: 'update', payload: updateObject }))\n      .catch(error => console.log(error))\n  }\n\n  const deteleTodos = (obj: EachTodo) => {\n    axios.delete(baseUrl+'delete-todos', { data: {_id: obj._id} })\n    .then((json: any) => {\n      setTodos({ type: 'delete', payload: obj })\n    })\n    .catch(error => console.log(error))\n  }\n  \n  useEffect(() => {\n    fetchTodos()\n  }, [])\n\n  function todoReducer(state: State, action: Action) {\n    switch(action.type) {\n      // case 'setAll':\n      //   return [ ...action.payload ];\n      case 'add':\n        return [ ...state, action.payload ];\n      case 'update':\n        const tempState = [ ...state ]\n        return tempState.map((itm: EachTodo) => {\n          const tempItm: EachTodo = {...itm}\n          if (itm._id === action.payload._id) {\n            tempItm.isDone = itm.isDone ? false : true;\n            return tempItm\n          }\n          else return tempItm\n        })\n      case 'delete':\n        return [ ...state.filter((itm: EachTodo) => itm._id !== action.payload._id) ]\n      default:\n        return [ ...state ]\n    }\n  }\n\n  const handleAdd = () => {\n    if (val === '') return;\n    // const id: string = uuid();\n    addTodos({ value: val, isDone: false })\n    // setTodos({ type: 'add', payload: { id: id, value: val, isDone: false } })\n    // setVal('')\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Todos\n      </header>\n      <div className=\"todo-input-section\">\n        <input \n          className=\"todo-input\" \n          data-testid=\"input\"\n          value={val} \n          placeholder=\"please add the task here\" \n          onChange={e => setVal(e.target.value)} \n          onKeyPress={e => e.key === 'Enter' && handleAdd()}\n        />\n        <button onClick={handleAdd} data-testid=\"add-btn\">Add</button>\n      </div>\n      <div className=\"todo-elements\" data-testid=\"elements\">\n        {loading ? 'loading...' : todos.map((each: EachTodo, index: number) => \n          <div className=\"todo-element\" key={each._id}>\n            <input \n              defaultChecked={each.isDone}\n              type=\"checkbox\" \n              className=\"checkbox\"\n              onChange={(e: any) => updateTodos('isDone', e.target.checked, each)}\n              data-testid=\"checkbox\"\n              // onClick={() => setTodos({ type: 'update', payload: { ...each } })}\n            />\n            <span\n              key={each._id} \n              style={ each.isDone ? { textDecoration: 'line-through', color: 'lightgray' } : {} }\n            >\n              {each.value}\n            </span>\n            <span className=\"delete-todo\" data-testid={`delete-${index}`} onClick={() => deteleTodos(each)}>\n              <Icon path={mdiCloseCircle} size=\"1.3rem\" />\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}