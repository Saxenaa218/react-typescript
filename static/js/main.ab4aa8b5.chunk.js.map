{"version":3,"sources":["components/TodoList.tsx","components/TodoInputSection.tsx","utils/reducers.ts","utils/constants.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoLists","props","loading","todos","updateTodos","deleteTodos","className","map","each","index","defaultChecked","isDone","type","onChange","e","target","checked","style","textDecoration","color","value","_id","onClick","Icon","path","mdiCloseCircle","size","React","memo","TodoInputSection","val","setVal","handleAdd","placeholder","onKeyPress","key","todoReducer","state","action","payload","itm","tempItm","filter","App","useState","setLoading","useReducer","setTodos","useEffect","axios","get","baseUrl","then","json","data","error","forEach","catch","console","useCallback","post","TodoList","fieldChanged","updatedValue","object","updateObject","put","obj","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab4aa8b5.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@mdi/react'\nimport { mdiCloseCircle } from '@mdi/js'\nimport { EachTodo, TodoProps } from '../utils/types';\n\nconst TodoLists: React.FC<TodoProps> = (props: TodoProps): JSX.Element => {\n    const { loading, todos, updateTodos, deleteTodos } = props;\n    return (\n        <div className=\"todo-elements\" data-testid=\"elements\">\n            {loading ? \n                'loading...' \n                : \n                todos.map((each: EachTodo, index: number) => \n                    <div className=\"todo-element\" key={each._id}>\n                        <input \n                            defaultChecked={each.isDone}\n                            type=\"checkbox\" \n                            className=\"checkbox\"\n                            onChange={(e: any) => updateTodos('isDone', e.target.checked, each)}\n                            data-testid=\"checkbox\"\n                        />\n                        <span\n                            key={each._id} \n                            style={ each.isDone ? { textDecoration: 'line-through', color: 'lightgray' } : {} }\n                        >\n                            {each.value}\n                        </span>\n                        <span className=\"delete-todo\" data-testid={`delete-${index}`} onClick={() => deleteTodos(each)}>\n                            <Icon path={mdiCloseCircle} size=\"1.3rem\" />\n                        </span>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default React.memo(TodoLists);","import React from 'react';\nimport { TodoInputSectionProps } from '../utils/types';\n\nconst TodoInputSection: React.FC<TodoInputSectionProps> = (props: TodoInputSectionProps): JSX.Element => {\n    const { val, setVal, handleAdd } = props\n    return (\n        <div className=\"todo-input-section\">\n            <input \n                className=\"todo-input\" \n                data-testid=\"input\"\n                value={val} \n                placeholder=\"please add the task here\" \n                onChange={e => setVal(e.target.value)} \n                onKeyPress={e => e.key === 'Enter' && handleAdd()}\n            />\n            <button onClick={handleAdd} data-testid=\"add-btn\">Add</button>\n        </div>\n    )\n}\n\nexport default React.memo(TodoInputSection);","import { EachTodo, State, Action } from './types'\n\nexport function todoReducer(state: State, action: Action) {\n    switch(action.type) {\n        case 'add':\n            return [ ...state, action.payload ];\n        case 'update':\n            const tempState = [ ...state ]\n            return tempState.map((itm: EachTodo) => {\n                const tempItm: EachTodo = {...itm}\n                if (itm._id === action.payload._id) {\n                    tempItm.isDone = itm.isDone ? false : true;\n                    return tempItm\n                }\n                else return tempItm\n            })\n        case 'delete':\n            return [ ...state.filter((itm: EachTodo) => itm._id !== action.payload._id) ]\n        default:\n            return [ ...state ]\n    }\n}","export const baseUrl: string = 'http://localhost:3005/';\nexport const GET_TODOS: string = baseUrl+'get-todos';\nexport const ADD_TODOS: string = baseUrl+'add-todos';\nexport const UPDATE_TODOS: string = baseUrl+'update-todos';\nexport const DELETE_TODOS: string = baseUrl+'delete-todos';","import { useEffect, useReducer, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { EachTodo } from './utils/types';\nimport TodoList from './components/TodoList'\nimport TodoInputSection from './components/TodoInputSection'\nimport { todoReducer } from './utils/reducers'\nimport { GET_TODOS, ADD_TODOS, UPDATE_TODOS, DELETE_TODOS } from './utils/constants'\nimport './App.scss';\n\nconst App: React.FC = () => {\n  \n  const [val, setVal] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [todos, setTodos] = useReducer(todoReducer, []);\n  \n  const fetchTodos = (): void => {\n    setLoading(true)\n    axios.get(GET_TODOS)\n      .then((json: any) => {\n        if (!json.data.data.error) json.data.data.forEach((each: EachTodo) => setTodos({ type: 'add', payload: each }))\n        setLoading(false)\n      })\n      .catch(error => {\n        console.error(error)\n        setLoading(false)\n      })\n  }\n\n  const addTodos = (data: any): void => {\n    axios.post(ADD_TODOS, { ...data })\n      .then(json => {\n        const { isDone, value, _id } = json.data.data\n        setTodos({ type: 'add', payload: { isDone, value, _id } })\n        setVal('')\n      })\n      .catch(error => {\n        console.error(error)\n      })\n  }\n\n  const updateTodos = (fieldChanged: string, updatedValue: boolean, object: EachTodo): void => {\n    const updateObject: any = { ...object };\n    updateObject[fieldChanged] = updatedValue;\n    axios.put(UPDATE_TODOS, { ...updateObject })\n      .then((json: any) => setTodos({ type: 'update', payload: updateObject }))\n      .catch(error => console.error(error))\n  }\n\n  const deteleTodos = (obj: EachTodo): void => {\n    axios.delete(DELETE_TODOS, { data: {_id: obj._id} })\n    .then((json: any) => setTodos({ type: 'delete', payload: obj }))\n    .catch(error => console.error(error))\n  }\n  \n  useEffect((): void => {\n    fetchTodos()\n  }, [])\n\n  const handleAdd = (): void => {\n    if (val === '') return;\n    addTodos({ value: val, isDone: false })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Todos</header>\n      <TodoInputSection val={val} setVal={setVal} handleAdd={useCallback(handleAdd, [val])} />\n      <TodoList loading={loading} todos={todos} updateTodos={useCallback(updateTodos, [])} deleteTodos={useCallback(deteleTodos, [])} />\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}